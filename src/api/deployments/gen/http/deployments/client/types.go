// Code generated by goa v3.8.5, DO NOT EDIT.
//
// deployments HTTP client types
//
// Command:
// $ goa gen github.com/acul009/control-panel-2/src/api/deployments/design

package client

import (
	"unicode/utf8"

	deployments "github.com/acul009/control-panel-2/src/api/deployments/gen/deployments"
	goa "goa.design/goa/v3/pkg"
)

// UpsertRequestBody is the type of the "deployments" service "upsert" endpoint
// HTTP request body.
type UpsertRequestBody struct {
	Name       string                  `form:"name" json:"name" xml:"name"`
	Containers []*ContainerRequestBody `form:"containers" json:"containers" xml:"containers"`
	Parameters []*ParameterRequestBody `form:"parameters,omitempty" json:"parameters,omitempty" xml:"parameters,omitempty"`
}

// GetResponseBody is the type of the "deployments" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	Name       *string                  `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Containers []*ContainerResponseBody `form:"containers,omitempty" json:"containers,omitempty" xml:"containers,omitempty"`
	Parameters []*ParameterResponseBody `form:"parameters,omitempty" json:"parameters,omitempty" xml:"parameters,omitempty"`
}

// GetDeploymentNotFoundResponseBody is the type of the "deployments" service
// "get" endpoint HTTP response body for the "DeploymentNotFound" error.
type GetDeploymentNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteDeploymentNotFoundResponseBody is the type of the "deployments"
// service "delete" endpoint HTTP response body for the "DeploymentNotFound"
// error.
type DeleteDeploymentNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ContainerRequestBody is used to define fields on request body types.
type ContainerRequestBody struct {
	Name       string                       `form:"name" json:"name" xml:"name"`
	Image      string                       `form:"image" json:"image" xml:"image"`
	Parameters []*ParameterUsageRequestBody `form:"parameters,omitempty" json:"parameters,omitempty" xml:"parameters,omitempty"`
	Services   []string                     `form:"services,omitempty" json:"services,omitempty" xml:"services,omitempty"`
	Ports      []*PortmappingRequestBody    `form:"ports,omitempty" json:"ports,omitempty" xml:"ports,omitempty"`
}

// ParameterUsageRequestBody is used to define fields on request body types.
type ParameterUsageRequestBody struct {
	Name        *string  `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Environment []string `form:"environment,omitempty" json:"environment,omitempty" xml:"environment,omitempty"`
	Files       []string `form:"files,omitempty" json:"files,omitempty" xml:"files,omitempty"`
}

// PortmappingRequestBody is used to define fields on request body types.
type PortmappingRequestBody struct {
	Host      uint32 `form:"host" json:"host" xml:"host"`
	Container uint32 `form:"container" json:"container" xml:"container"`
	Protocol  string `form:"protocol" json:"protocol" xml:"protocol"`
}

// ParameterRequestBody is used to define fields on request body types.
type ParameterRequestBody struct {
	Name  string `form:"name" json:"name" xml:"name"`
	Value string `form:"value" json:"value" xml:"value"`
}

// ContainerResponseBody is used to define fields on response body types.
type ContainerResponseBody struct {
	Name       *string                       `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Image      *string                       `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
	Parameters []*ParameterUsageResponseBody `form:"parameters,omitempty" json:"parameters,omitempty" xml:"parameters,omitempty"`
	Services   []string                      `form:"services,omitempty" json:"services,omitempty" xml:"services,omitempty"`
	Ports      []*PortmappingResponseBody    `form:"ports,omitempty" json:"ports,omitempty" xml:"ports,omitempty"`
}

// ParameterUsageResponseBody is used to define fields on response body types.
type ParameterUsageResponseBody struct {
	Name        *string  `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Environment []string `form:"environment,omitempty" json:"environment,omitempty" xml:"environment,omitempty"`
	Files       []string `form:"files,omitempty" json:"files,omitempty" xml:"files,omitempty"`
}

// PortmappingResponseBody is used to define fields on response body types.
type PortmappingResponseBody struct {
	Host      *uint32 `form:"host,omitempty" json:"host,omitempty" xml:"host,omitempty"`
	Container *uint32 `form:"container,omitempty" json:"container,omitempty" xml:"container,omitempty"`
	Protocol  *string `form:"protocol,omitempty" json:"protocol,omitempty" xml:"protocol,omitempty"`
}

// ParameterResponseBody is used to define fields on response body types.
type ParameterResponseBody struct {
	Name  *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// NewUpsertRequestBody builds the HTTP request body from the payload of the
// "upsert" endpoint of the "deployments" service.
func NewUpsertRequestBody(p *deployments.Deployment) *UpsertRequestBody {
	body := &UpsertRequestBody{
		Name: p.Name,
	}
	if p.Containers != nil {
		body.Containers = make([]*ContainerRequestBody, len(p.Containers))
		for i, val := range p.Containers {
			body.Containers[i] = marshalDeploymentsContainerToContainerRequestBody(val)
		}
	}
	if p.Parameters != nil {
		body.Parameters = make([]*ParameterRequestBody, len(p.Parameters))
		for i, val := range p.Parameters {
			body.Parameters[i] = marshalDeploymentsParameterToParameterRequestBody(val)
		}
	}
	return body
}

// NewGetDeploymentOK builds a "deployments" service "get" endpoint result from
// a HTTP "OK" response.
func NewGetDeploymentOK(body *GetResponseBody) *deployments.Deployment {
	v := &deployments.Deployment{
		Name: *body.Name,
	}
	v.Containers = make([]*deployments.Container, len(body.Containers))
	for i, val := range body.Containers {
		v.Containers[i] = unmarshalContainerResponseBodyToDeploymentsContainer(val)
	}
	if body.Parameters != nil {
		v.Parameters = make([]*deployments.Parameter, len(body.Parameters))
		for i, val := range body.Parameters {
			v.Parameters[i] = unmarshalParameterResponseBodyToDeploymentsParameter(val)
		}
	}

	return v
}

// NewGetDeploymentNotFound builds a deployments service get endpoint
// DeploymentNotFound error.
func NewGetDeploymentNotFound(body *GetDeploymentNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteDeploymentNotFound builds a deployments service delete endpoint
// DeploymentNotFound error.
func NewDeleteDeploymentNotFound(body *DeleteDeploymentNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateGetResponseBody runs the validations defined on GetResponseBody
func ValidateGetResponseBody(body *GetResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Containers == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("containers", "body"))
	}
	if len(body.Containers) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.containers", body.Containers, len(body.Containers), 1, true))
	}
	for _, e := range body.Containers {
		if e != nil {
			if err2 := ValidateContainerResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Parameters {
		if e != nil {
			if err2 := ValidateParameterResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetDeploymentNotFoundResponseBody runs the validations defined on
// get_DeploymentNotFound_response_body
func ValidateGetDeploymentNotFoundResponseBody(body *GetDeploymentNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteDeploymentNotFoundResponseBody runs the validations defined on
// delete_DeploymentNotFound_response_body
func ValidateDeleteDeploymentNotFoundResponseBody(body *DeleteDeploymentNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateContainerRequestBody runs the validations defined on
// ContainerRequestBody
func ValidateContainerRequestBody(body *ContainerRequestBody) (err error) {
	for _, e := range body.Parameters {
		if e != nil {
			if err2 := ValidateParameterUsageRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Ports {
		if e != nil {
			if err2 := ValidatePortmappingRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateParameterUsageRequestBody runs the validations defined on
// ParameterUsageRequestBody
func ValidateParameterUsageRequestBody(body *ParameterUsageRequestBody) (err error) {
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	return
}

// ValidatePortmappingRequestBody runs the validations defined on
// PortmappingRequestBody
func ValidatePortmappingRequestBody(body *PortmappingRequestBody) (err error) {
	if body.Host < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.host", body.Host, 1, true))
	}
	if body.Host > 65535 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.host", body.Host, 65535, false))
	}
	if body.Container < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.container", body.Container, 1, true))
	}
	if body.Container > 65535 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.container", body.Container, 65535, false))
	}
	if !(body.Protocol == "tcp" || body.Protocol == "udp") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.protocol", body.Protocol, []interface{}{"tcp", "udp"}))
	}
	return
}

// ValidateParameterRequestBody runs the validations defined on
// ParameterRequestBody
func ValidateParameterRequestBody(body *ParameterRequestBody) (err error) {
	if utf8.RuneCountInString(body.Name) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 1, true))
	}
	return
}

// ValidateContainerResponseBody runs the validations defined on
// ContainerResponseBody
func ValidateContainerResponseBody(body *ContainerResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Image == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("image", "body"))
	}
	for _, e := range body.Parameters {
		if e != nil {
			if err2 := ValidateParameterUsageResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Ports {
		if e != nil {
			if err2 := ValidatePortmappingResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateParameterUsageResponseBody runs the validations defined on
// ParameterUsageResponseBody
func ValidateParameterUsageResponseBody(body *ParameterUsageResponseBody) (err error) {
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	return
}

// ValidatePortmappingResponseBody runs the validations defined on
// PortmappingResponseBody
func ValidatePortmappingResponseBody(body *PortmappingResponseBody) (err error) {
	if body.Host == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("host", "body"))
	}
	if body.Container == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("container", "body"))
	}
	if body.Protocol == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("protocol", "body"))
	}
	if body.Host != nil {
		if *body.Host < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.host", *body.Host, 1, true))
		}
	}
	if body.Host != nil {
		if *body.Host > 65535 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.host", *body.Host, 65535, false))
		}
	}
	if body.Container != nil {
		if *body.Container < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.container", *body.Container, 1, true))
		}
	}
	if body.Container != nil {
		if *body.Container > 65535 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.container", *body.Container, 65535, false))
		}
	}
	if body.Protocol != nil {
		if !(*body.Protocol == "tcp" || *body.Protocol == "udp") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.protocol", *body.Protocol, []interface{}{"tcp", "udp"}))
		}
	}
	return
}

// ValidateParameterResponseBody runs the validations defined on
// ParameterResponseBody
func ValidateParameterResponseBody(body *ParameterResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	return
}
