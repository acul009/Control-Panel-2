// Code generated by goa v3.8.5, DO NOT EDIT.
//
// deployments HTTP client CLI support package
//
// Command:
// $ goa gen github.com/acul009/control-panel-2/src/api/deployments/design

package client

import (
	"encoding/json"
	"fmt"

	deployments "github.com/acul009/control-panel-2/src/api/deployments/gen/deployments"
	goa "goa.design/goa/v3/pkg"
)

// BuildUpsertPayload builds the payload for the deployments upsert endpoint
// from CLI flags.
func BuildUpsertPayload(deploymentsUpsertBody string) (*deployments.Deployment, error) {
	var err error
	var body UpsertRequestBody
	{
		err = json.Unmarshal([]byte(deploymentsUpsertBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"containers\": [\n         {\n            \"image\": \"Voluptatibus maiores qui voluptatem.\",\n            \"name\": \"Iste non quisquam sed architecto.\",\n            \"parameters\": [\n               {\n                  \"environment\": [\n                     \"Veritatis libero.\",\n                     \"Aut recusandae et temporibus asperiores.\"\n                  ],\n                  \"files\": [\n                     \"A consequatur ut qui natus voluptatem necessitatibus.\",\n                     \"Aliquam consequatur est voluptates ullam voluptate esse.\",\n                     \"Aut et totam voluptatem quia illo voluptate.\",\n                     \"Ex rem fugiat est animi.\"\n                  ],\n                  \"name\": \"j\"\n               },\n               {\n                  \"environment\": [\n                     \"Veritatis libero.\",\n                     \"Aut recusandae et temporibus asperiores.\"\n                  ],\n                  \"files\": [\n                     \"A consequatur ut qui natus voluptatem necessitatibus.\",\n                     \"Aliquam consequatur est voluptates ullam voluptate esse.\",\n                     \"Aut et totam voluptatem quia illo voluptate.\",\n                     \"Ex rem fugiat est animi.\"\n                  ],\n                  \"name\": \"j\"\n               }\n            ],\n            \"ports\": [\n               {\n                  \"container\": 21062,\n                  \"host\": 3960,\n                  \"protocol\": \"udp\"\n               },\n               {\n                  \"container\": 21062,\n                  \"host\": 3960,\n                  \"protocol\": \"udp\"\n               }\n            ],\n            \"services\": [\n               \"Magnam libero consectetur qui.\",\n               \"Alias quam.\"\n            ]\n         }\n      ],\n      \"name\": \"Cupiditate dignissimos et nemo.\",\n      \"parameters\": [\n         {\n            \"name\": \"xm\",\n            \"source\": \"configurable\",\n            \"type\": \"int\",\n            \"value\": \"Eius alias.\"\n         },\n         {\n            \"name\": \"xm\",\n            \"source\": \"configurable\",\n            \"type\": \"int\",\n            \"value\": \"Eius alias.\"\n         },\n         {\n            \"name\": \"xm\",\n            \"source\": \"configurable\",\n            \"type\": \"int\",\n            \"value\": \"Eius alias.\"\n         }\n      ]\n   }'")
		}
		if body.Containers == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("containers", "body"))
		}
		if len(body.Containers) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.containers", body.Containers, len(body.Containers), 1, true))
		}
		for _, e := range body.Containers {
			if e != nil {
				if err2 := ValidateContainerRequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		for _, e := range body.Parameters {
			if e != nil {
				if err2 := ValidateParameterRequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &deployments.Deployment{
		Name: body.Name,
	}
	if body.Containers != nil {
		v.Containers = make([]*deployments.Container, len(body.Containers))
		for i, val := range body.Containers {
			v.Containers[i] = marshalContainerRequestBodyToDeploymentsContainer(val)
		}
	}
	if body.Parameters != nil {
		v.Parameters = make([]*deployments.Parameter, len(body.Parameters))
		for i, val := range body.Parameters {
			v.Parameters[i] = marshalParameterRequestBodyToDeploymentsParameter(val)
		}
	}

	return v, nil
}
