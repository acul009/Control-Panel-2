// Code generated by goa v3.8.5, DO NOT EDIT.
//
// deployments HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/acul009/control-panel-2/src/api/deployments/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	deployments "github.com/acul009/control-panel-2/src/api/deployments/gen/deployments"
	goahttp "goa.design/goa/v3/http"
)

// BuildUpsertRequest instantiates a HTTP request object with method and path
// set to call the "deployments" service "upsert" endpoint
func (c *Client) BuildUpsertRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpsertDeploymentsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("deployments", "upsert", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpsertRequest returns an encoder for requests sent to the deployments
// upsert server.
func EncodeUpsertRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*deployments.Deployment)
		if !ok {
			return goahttp.ErrInvalidType("deployments", "upsert", "*deployments.Deployment", v)
		}
		body := NewUpsertRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("deployments", "upsert", err)
		}
		return nil
	}
}

// DecodeUpsertResponse returns a decoder for responses returned by the
// deployments upsert endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeUpsertResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("deployments", "upsert", resp.StatusCode, string(body))
		}
	}
}

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "deployments" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListDeploymentsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("deployments", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListResponse returns a decoder for responses returned by the
// deployments list endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "list", err)
			}
			return body, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("deployments", "list", resp.StatusCode, string(body))
		}
	}
}

// BuildGetRequest instantiates a HTTP request object with method and path set
// to call the "deployments" service "get" endpoint
func (c *Client) BuildGetRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		deploymentName string
	)
	{
		p, ok := v.(string)
		if !ok {
			return nil, goahttp.ErrInvalidType("deployments", "get", "string", v)
		}
		deploymentName = p
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetDeploymentsPath(deploymentName)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("deployments", "get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetResponse returns a decoder for responses returned by the
// deployments get endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetResponse may return the following errors:
//   - "DeploymentNotFound" (type *goa.ServiceError): http.StatusNotFound
//   - error: internal error
func DecodeGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "get", err)
			}
			err = ValidateGetResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "get", err)
			}
			res := NewGetDeploymentOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetDeploymentNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "get", err)
			}
			err = ValidateGetDeploymentNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "get", err)
			}
			return nil, NewGetDeploymentNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("deployments", "get", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "deployments" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		deploymentName string
	)
	{
		p, ok := v.(string)
		if !ok {
			return nil, goahttp.ErrInvalidType("deployments", "delete", "string", v)
		}
		deploymentName = p
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteDeploymentsPath(deploymentName)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("deployments", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteResponse returns a decoder for responses returned by the
// deployments delete endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeDeleteResponse may return the following errors:
//   - "DeploymentNotFound" (type *goa.ServiceError): http.StatusNotFound
//   - error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DeleteDeploymentNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "delete", err)
			}
			err = ValidateDeleteDeploymentNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "delete", err)
			}
			return nil, NewDeleteDeploymentNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("deployments", "delete", resp.StatusCode, string(body))
		}
	}
}

// marshalDeploymentsContainerToContainerRequestBody builds a value of type
// *ContainerRequestBody from a value of type *deployments.Container.
func marshalDeploymentsContainerToContainerRequestBody(v *deployments.Container) *ContainerRequestBody {
	res := &ContainerRequestBody{
		Name:  v.Name,
		Image: v.Image,
	}
	if v.Parameters != nil {
		res.Parameters = make([]*ParameterUsageRequestBody, len(v.Parameters))
		for i, val := range v.Parameters {
			res.Parameters[i] = marshalDeploymentsParameterUsageToParameterUsageRequestBody(val)
		}
	}
	if v.Services != nil {
		res.Services = make([]string, len(v.Services))
		for i, val := range v.Services {
			res.Services[i] = val
		}
	}
	if v.Ports != nil {
		res.Ports = make([]*PortmappingRequestBody, len(v.Ports))
		for i, val := range v.Ports {
			res.Ports[i] = marshalDeploymentsPortmappingToPortmappingRequestBody(val)
		}
	}

	return res
}

// marshalDeploymentsParameterUsageToParameterUsageRequestBody builds a value
// of type *ParameterUsageRequestBody from a value of type
// *deployments.ParameterUsage.
func marshalDeploymentsParameterUsageToParameterUsageRequestBody(v *deployments.ParameterUsage) *ParameterUsageRequestBody {
	if v == nil {
		return nil
	}
	res := &ParameterUsageRequestBody{
		Name: v.Name,
	}
	if v.Environment != nil {
		res.Environment = make([]string, len(v.Environment))
		for i, val := range v.Environment {
			res.Environment[i] = val
		}
	}
	if v.Files != nil {
		res.Files = make([]string, len(v.Files))
		for i, val := range v.Files {
			res.Files[i] = val
		}
	}

	return res
}

// marshalDeploymentsPortmappingToPortmappingRequestBody builds a value of type
// *PortmappingRequestBody from a value of type *deployments.Portmapping.
func marshalDeploymentsPortmappingToPortmappingRequestBody(v *deployments.Portmapping) *PortmappingRequestBody {
	if v == nil {
		return nil
	}
	res := &PortmappingRequestBody{
		Host:      v.Host,
		Container: v.Container,
		Protocol:  v.Protocol,
	}

	return res
}

// marshalDeploymentsParameterToParameterRequestBody builds a value of type
// *ParameterRequestBody from a value of type *deployments.Parameter.
func marshalDeploymentsParameterToParameterRequestBody(v *deployments.Parameter) *ParameterRequestBody {
	if v == nil {
		return nil
	}
	res := &ParameterRequestBody{
		Name:  v.Name,
		Value: v.Value,
	}

	return res
}

// marshalContainerRequestBodyToDeploymentsContainer builds a value of type
// *deployments.Container from a value of type *ContainerRequestBody.
func marshalContainerRequestBodyToDeploymentsContainer(v *ContainerRequestBody) *deployments.Container {
	res := &deployments.Container{
		Name:  v.Name,
		Image: v.Image,
	}
	if v.Parameters != nil {
		res.Parameters = make([]*deployments.ParameterUsage, len(v.Parameters))
		for i, val := range v.Parameters {
			res.Parameters[i] = marshalParameterUsageRequestBodyToDeploymentsParameterUsage(val)
		}
	}
	if v.Services != nil {
		res.Services = make([]string, len(v.Services))
		for i, val := range v.Services {
			res.Services[i] = val
		}
	}
	if v.Ports != nil {
		res.Ports = make([]*deployments.Portmapping, len(v.Ports))
		for i, val := range v.Ports {
			res.Ports[i] = marshalPortmappingRequestBodyToDeploymentsPortmapping(val)
		}
	}

	return res
}

// marshalParameterUsageRequestBodyToDeploymentsParameterUsage builds a value
// of type *deployments.ParameterUsage from a value of type
// *ParameterUsageRequestBody.
func marshalParameterUsageRequestBodyToDeploymentsParameterUsage(v *ParameterUsageRequestBody) *deployments.ParameterUsage {
	if v == nil {
		return nil
	}
	res := &deployments.ParameterUsage{
		Name: v.Name,
	}
	if v.Environment != nil {
		res.Environment = make([]string, len(v.Environment))
		for i, val := range v.Environment {
			res.Environment[i] = val
		}
	}
	if v.Files != nil {
		res.Files = make([]string, len(v.Files))
		for i, val := range v.Files {
			res.Files[i] = val
		}
	}

	return res
}

// marshalPortmappingRequestBodyToDeploymentsPortmapping builds a value of type
// *deployments.Portmapping from a value of type *PortmappingRequestBody.
func marshalPortmappingRequestBodyToDeploymentsPortmapping(v *PortmappingRequestBody) *deployments.Portmapping {
	if v == nil {
		return nil
	}
	res := &deployments.Portmapping{
		Host:      v.Host,
		Container: v.Container,
		Protocol:  v.Protocol,
	}

	return res
}

// marshalParameterRequestBodyToDeploymentsParameter builds a value of type
// *deployments.Parameter from a value of type *ParameterRequestBody.
func marshalParameterRequestBodyToDeploymentsParameter(v *ParameterRequestBody) *deployments.Parameter {
	if v == nil {
		return nil
	}
	res := &deployments.Parameter{
		Name:  v.Name,
		Value: v.Value,
	}

	return res
}

// unmarshalContainerResponseBodyToDeploymentsContainer builds a value of type
// *deployments.Container from a value of type *ContainerResponseBody.
func unmarshalContainerResponseBodyToDeploymentsContainer(v *ContainerResponseBody) *deployments.Container {
	res := &deployments.Container{
		Name:  *v.Name,
		Image: *v.Image,
	}
	if v.Parameters != nil {
		res.Parameters = make([]*deployments.ParameterUsage, len(v.Parameters))
		for i, val := range v.Parameters {
			res.Parameters[i] = unmarshalParameterUsageResponseBodyToDeploymentsParameterUsage(val)
		}
	}
	if v.Services != nil {
		res.Services = make([]string, len(v.Services))
		for i, val := range v.Services {
			res.Services[i] = val
		}
	}
	if v.Ports != nil {
		res.Ports = make([]*deployments.Portmapping, len(v.Ports))
		for i, val := range v.Ports {
			res.Ports[i] = unmarshalPortmappingResponseBodyToDeploymentsPortmapping(val)
		}
	}

	return res
}

// unmarshalParameterUsageResponseBodyToDeploymentsParameterUsage builds a
// value of type *deployments.ParameterUsage from a value of type
// *ParameterUsageResponseBody.
func unmarshalParameterUsageResponseBodyToDeploymentsParameterUsage(v *ParameterUsageResponseBody) *deployments.ParameterUsage {
	if v == nil {
		return nil
	}
	res := &deployments.ParameterUsage{
		Name: v.Name,
	}
	if v.Environment != nil {
		res.Environment = make([]string, len(v.Environment))
		for i, val := range v.Environment {
			res.Environment[i] = val
		}
	}
	if v.Files != nil {
		res.Files = make([]string, len(v.Files))
		for i, val := range v.Files {
			res.Files[i] = val
		}
	}

	return res
}

// unmarshalPortmappingResponseBodyToDeploymentsPortmapping builds a value of
// type *deployments.Portmapping from a value of type *PortmappingResponseBody.
func unmarshalPortmappingResponseBodyToDeploymentsPortmapping(v *PortmappingResponseBody) *deployments.Portmapping {
	if v == nil {
		return nil
	}
	res := &deployments.Portmapping{
		Host:      *v.Host,
		Container: *v.Container,
		Protocol:  *v.Protocol,
	}

	return res
}

// unmarshalParameterResponseBodyToDeploymentsParameter builds a value of type
// *deployments.Parameter from a value of type *ParameterResponseBody.
func unmarshalParameterResponseBodyToDeploymentsParameter(v *ParameterResponseBody) *deployments.Parameter {
	if v == nil {
		return nil
	}
	res := &deployments.Parameter{
		Name:  *v.Name,
		Value: *v.Value,
	}

	return res
}
