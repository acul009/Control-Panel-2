// Code generated by goa v3.8.5, DO NOT EDIT.
//
// deployments HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/acul009/control-panel-2/src/api/deployments/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"

	deployments "github.com/acul009/control-panel-2/src/api/deployments/gen/deployments"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeUpsertResponse returns an encoder for responses returned by the
// deployments upsert endpoint.
func EncodeUpsertResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeUpsertRequest returns a decoder for requests sent to the deployments
// upsert endpoint.
func DecodeUpsertRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UpsertRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpsertRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewUpsertDeployment(&body)

		return payload, nil
	}
}

// EncodeListResponse returns an encoder for responses returned by the
// deployments list endpoint.
func EncodeListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.([]string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeGetResponse returns an encoder for responses returned by the
// deployments get endpoint.
func EncodeGetResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*deployments.Deployment)
		enc := encoder(ctx, w)
		body := NewGetResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetRequest returns a decoder for requests sent to the deployments get
// endpoint.
func DecodeGetRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			deploymentName string

			params = mux.Vars(r)
		)
		deploymentName = params["deploymentName"]
		payload := deploymentName

		return payload, nil
	}
}

// EncodeGetError returns an encoder for errors returned by the get deployments
// endpoint.
func EncodeGetError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "DeploymentNotFound":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetDeploymentNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteResponse returns an encoder for responses returned by the
// deployments delete endpoint.
func EncodeDeleteResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeleteRequest returns a decoder for requests sent to the deployments
// delete endpoint.
func DecodeDeleteRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			deploymentName string

			params = mux.Vars(r)
		)
		deploymentName = params["deploymentName"]
		payload := deploymentName

		return payload, nil
	}
}

// EncodeDeleteError returns an encoder for errors returned by the delete
// deployments endpoint.
func EncodeDeleteError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "DeploymentNotFound":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteDeploymentNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// unmarshalContainerRequestBodyToDeploymentsContainer builds a value of type
// *deployments.Container from a value of type *ContainerRequestBody.
func unmarshalContainerRequestBodyToDeploymentsContainer(v *ContainerRequestBody) *deployments.Container {
	res := &deployments.Container{
		Name:  *v.Name,
		Image: *v.Image,
	}
	if v.Parameters != nil {
		res.Parameters = make([]*deployments.ParameterUsage, len(v.Parameters))
		for i, val := range v.Parameters {
			res.Parameters[i] = unmarshalParameterUsageRequestBodyToDeploymentsParameterUsage(val)
		}
	}
	if v.Services != nil {
		res.Services = make([]string, len(v.Services))
		for i, val := range v.Services {
			res.Services[i] = val
		}
	}
	if v.Ports != nil {
		res.Ports = make([]*deployments.Portmapping, len(v.Ports))
		for i, val := range v.Ports {
			res.Ports[i] = unmarshalPortmappingRequestBodyToDeploymentsPortmapping(val)
		}
	}

	return res
}

// unmarshalParameterUsageRequestBodyToDeploymentsParameterUsage builds a value
// of type *deployments.ParameterUsage from a value of type
// *ParameterUsageRequestBody.
func unmarshalParameterUsageRequestBodyToDeploymentsParameterUsage(v *ParameterUsageRequestBody) *deployments.ParameterUsage {
	if v == nil {
		return nil
	}
	res := &deployments.ParameterUsage{
		Name: v.Name,
	}
	if v.Environment != nil {
		res.Environment = make([]string, len(v.Environment))
		for i, val := range v.Environment {
			res.Environment[i] = val
		}
	}
	if v.Files != nil {
		res.Files = make([]string, len(v.Files))
		for i, val := range v.Files {
			res.Files[i] = val
		}
	}

	return res
}

// unmarshalPortmappingRequestBodyToDeploymentsPortmapping builds a value of
// type *deployments.Portmapping from a value of type *PortmappingRequestBody.
func unmarshalPortmappingRequestBodyToDeploymentsPortmapping(v *PortmappingRequestBody) *deployments.Portmapping {
	if v == nil {
		return nil
	}
	res := &deployments.Portmapping{
		Host:      *v.Host,
		Container: *v.Container,
		Protocol:  *v.Protocol,
	}

	return res
}

// unmarshalParameterRequestBodyToDeploymentsParameter builds a value of type
// *deployments.Parameter from a value of type *ParameterRequestBody.
func unmarshalParameterRequestBodyToDeploymentsParameter(v *ParameterRequestBody) *deployments.Parameter {
	if v == nil {
		return nil
	}
	res := &deployments.Parameter{
		Name:   *v.Name,
		Source: *v.Source,
		Type:   *v.Type,
		Value:  v.Value,
	}

	return res
}

// marshalDeploymentsContainerToContainerResponseBody builds a value of type
// *ContainerResponseBody from a value of type *deployments.Container.
func marshalDeploymentsContainerToContainerResponseBody(v *deployments.Container) *ContainerResponseBody {
	res := &ContainerResponseBody{
		Name:  v.Name,
		Image: v.Image,
	}
	if v.Parameters != nil {
		res.Parameters = make([]*ParameterUsageResponseBody, len(v.Parameters))
		for i, val := range v.Parameters {
			res.Parameters[i] = marshalDeploymentsParameterUsageToParameterUsageResponseBody(val)
		}
	}
	if v.Services != nil {
		res.Services = make([]string, len(v.Services))
		for i, val := range v.Services {
			res.Services[i] = val
		}
	}
	if v.Ports != nil {
		res.Ports = make([]*PortmappingResponseBody, len(v.Ports))
		for i, val := range v.Ports {
			res.Ports[i] = marshalDeploymentsPortmappingToPortmappingResponseBody(val)
		}
	}

	return res
}

// marshalDeploymentsParameterUsageToParameterUsageResponseBody builds a value
// of type *ParameterUsageResponseBody from a value of type
// *deployments.ParameterUsage.
func marshalDeploymentsParameterUsageToParameterUsageResponseBody(v *deployments.ParameterUsage) *ParameterUsageResponseBody {
	if v == nil {
		return nil
	}
	res := &ParameterUsageResponseBody{
		Name: v.Name,
	}
	if v.Environment != nil {
		res.Environment = make([]string, len(v.Environment))
		for i, val := range v.Environment {
			res.Environment[i] = val
		}
	}
	if v.Files != nil {
		res.Files = make([]string, len(v.Files))
		for i, val := range v.Files {
			res.Files[i] = val
		}
	}

	return res
}

// marshalDeploymentsPortmappingToPortmappingResponseBody builds a value of
// type *PortmappingResponseBody from a value of type *deployments.Portmapping.
func marshalDeploymentsPortmappingToPortmappingResponseBody(v *deployments.Portmapping) *PortmappingResponseBody {
	if v == nil {
		return nil
	}
	res := &PortmappingResponseBody{
		Host:      v.Host,
		Container: v.Container,
		Protocol:  v.Protocol,
	}

	return res
}

// marshalDeploymentsParameterToParameterResponseBody builds a value of type
// *ParameterResponseBody from a value of type *deployments.Parameter.
func marshalDeploymentsParameterToParameterResponseBody(v *deployments.Parameter) *ParameterResponseBody {
	if v == nil {
		return nil
	}
	res := &ParameterResponseBody{
		Name:   v.Name,
		Source: v.Source,
		Type:   v.Type,
		Value:  v.Value,
	}

	return res
}
